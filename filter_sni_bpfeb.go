// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type filter_sniServerName struct{ ServerName [256]int8 }

// loadFilter_sni returns the embedded CollectionSpec for filter_sni.
func loadFilter_sni() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Filter_sniBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load filter_sni: %w", err)
	}

	return spec, err
}

// loadFilter_sniObjects loads filter_sni and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*filter_sniObjects
//	*filter_sniPrograms
//	*filter_sniMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFilter_sniObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFilter_sni()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// filter_sniSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_sniSpecs struct {
	filter_sniProgramSpecs
	filter_sniMapSpecs
}

// filter_sniSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_sniProgramSpecs struct {
	FilterSni *ebpf.ProgramSpec `ebpf:"filter_sni"`
}

// filter_sniMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_sniMapSpecs struct {
	DomainNames *ebpf.MapSpec `ebpf:"domain_names"`
	PktCount    *ebpf.MapSpec `ebpf:"pkt_count"`
}

// filter_sniObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFilter_sniObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_sniObjects struct {
	filter_sniPrograms
	filter_sniMaps
}

func (o *filter_sniObjects) Close() error {
	return _Filter_sniClose(
		&o.filter_sniPrograms,
		&o.filter_sniMaps,
	)
}

// filter_sniMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFilter_sniObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_sniMaps struct {
	DomainNames *ebpf.Map `ebpf:"domain_names"`
	PktCount    *ebpf.Map `ebpf:"pkt_count"`
}

func (m *filter_sniMaps) Close() error {
	return _Filter_sniClose(
		m.DomainNames,
		m.PktCount,
	)
}

// filter_sniPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFilter_sniObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_sniPrograms struct {
	FilterSni *ebpf.Program `ebpf:"filter_sni"`
}

func (p *filter_sniPrograms) Close() error {
	return _Filter_sniClose(
		p.FilterSni,
	)
}

func _Filter_sniClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filter_sni_bpfeb.o
var _Filter_sniBytes []byte
